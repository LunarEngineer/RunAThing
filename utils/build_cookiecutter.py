"""Create configuration files.

This ensures that environment and container specification files
are written out such that the environment is fully recreatable
and ephemeral.

This uses logic to programatically build cookiecutter templates
with some defaults. All those defaults are declared in a single
root configuration documentation.

This builds a setup.py, a setup.cfg, a
"""
import re
import subprocess
import yaml
from typing import Any, List, Mapping, Tuple
from io import TextIOWrapper

__TEMPLATE_HEADER__ = """###AutoGeneratedDocument
# This file is automatically generated.
# Rerunning the packaging script will not respect your changes.
# If you wish to implement change do that within your cookiecutter.json.
"""


def _parse_pyversion(version_string: str) -> Tuple[str, str]:
    """Parse major and minor python version.
    
    This uses regular expression parsing to turn
    `'3.10'` into `(3, 10)`. That allows for version
    comparison."""
    try:
        major, minor = re.search(r'(\d+\.\d+)', version_string).group(1).split('.')
        if (not major) or (not minor):
            raise NotImplementedError("Please pass a python version string like 3.10")
        if not major == '3':
            raise NotImplementedError(f"Only Python 3 for now, not {major} from {version_string}")
        # There's potentially more validation...
        major = int(float(major))
        minor = int(float(minor))
        return major, minor
    except BaseException as e:
        raise TypeError(f"Unable to determine python version from {version_string}")


def build_tox_ini(config_mapping: Mapping[str, Any]) -> str:    
    """Return tox.ini str"""
    # https://tox.wiki/en/latest/config.html#conf-core
    # Note all this is done explicitly for clarity sake.
    _python_project_dependencies: Mapping[str, Any] = config_mapping["project_dependencies"]["python"]
    # Versions
    _python_min_version: Tuple[int, int] = _parse_pyversion(_python_project_dependencies["min_version"])
    _python_max_version: Tuple[int, int] = _parse_pyversion(_python_project_dependencies["max_version"])
    _py_ver_string = ','.join([f'3{str(_)}' for _ in range(_python_min_version[1], _python_max_version[1])])

    return f"""{__TEMPLATE_HEADER__}
[tox]
requires =
    tox>=4
env_list = lint, type, py{{{_py_ver_string}}}

[testenv]
description = Setup for the testing suite.

commands =
    pytest {{posargs:tests}}
[testenv:lint]
description = run linters
skip_install = true
deps =
    black==22.12
commands = black {{posargs:.}}

[testenv:type]
description = run type checks
deps =
    mypy>=0.991
commands =
    mypy {{posargs:src tests}}
"""
