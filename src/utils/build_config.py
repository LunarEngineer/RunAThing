"""Parse a configuration file.

This picks up a config.ini in order to automatically generate
the required files needed for packaging.

Those files are intended to be ephemeral, as the environment they
build may be dynamic. It allows for package versions to be
explicitly declared at the root level and be inherited / overridden
deeper in the chain.

The configuration files written out are biased, but intended to
provide a project the capability to bootstrap to a functional
state and remain in touch with a secure remote.

TODO: GITHOOK
"""
import subprocess
import yaml
from typing import Any, List, Mapping
from io import TextIOWrapper

__TEMPLATE_HEADER__ = """###AutoGeneratedDocument
# This file is automatically generated.
# Rerunning the packaging script will not respect your changes."""


def build_setup_py(config_mapping: Mapping[str, Any]) -> str:
    """Return setup.py str"""
    # Note all this is done explicitly for clarity sake.
    _name = config_mapping["project_name"]
    _author_name = config_mapping["project_author"]
    _author_email = config_mapping["project_author_email"]
    _project_description = config_mapping["project_description"]
    _project_deps = config_mapping["project_dependencies"]["python"]
    try:
        remote_url = subprocess.check_output(['git', 'config', '--get', 'remote.origin.url']).strip().decode('utf-8')
    except subprocess.CalledProcessError:
        raise Exception("Unable to build setup.py: Is this a git project?")

    return f"""{__TEMPLATE_HEADER__}
from setuptools import setup, find_packages


setup(
    name="{_name}",
    version="VERSION",
    url="{remote_url}",
    author="{_author_name}",
    author_email="{_author_email}",
    description="{_project_description}",
    packages=find_packages(),
    install_requires={_project_deps}
)
    """


def build_pyproject_toml(config_mapping: Mapping[str, Any]) -> str:
    """Return pyproject.toml str"""
    # Note all this is done explicitly for clarity sake.
    _reqs: Mapping[str, Any] = config_mapping.get('project_dependencies')
    _build_reqs: List[str] = _reqs.get('build_deps')
    return f"""
[build-system]
requires = {_build_reqs}
build-backend = "setuptools.build_meta"
"""


def build_config(config_file: TextIOWrapper):
    """Build reusable configuration.

    This writes out the setup.py
    """
    # First try to load the config_file
    config_mapping = yaml.safe_load(config_file)
    _setup_py_str = build_setup_py(config_mapping)
    with open('setup.py', 'w') as setup_pyfile:
        setup_pyfile.write(_setup_py_str)
    _pyproject_toml_str = build_pyproject_toml(config_mapping)
    with open('pyproject.toml', 'w') as setup_pyproject_tomlfile:
        setup_pyproject_tomlfile.write(_pyproject_toml_str)
    raise NotImplementedError('implement pyproject.toml')
    raise NotImplementedError('implement setup.cfg')
    raise NotImplementedError('implement tox.ini')


if __name__ == '__main__':
    with open('config.yaml', 'r') as config_file:
        build_config(config_file)
